name: CI/CD - Backend

on:
  push:
    branches:
      - 'feature/**'
      - 'hotfix/**'
      - 'release/**'
      - 'developer'      
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'

  workflow_run:
    workflows: ["Infra"]
    types:
      - completed

jobs:
  build-test-deploy:
    if: ${{ github.event_name == 'workflow_run' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '9.0.x'
      BRANCH_NAME: ${{ github.ref_name }}
      #AZURE_CREDENTIALS: ''
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependências
        run: dotnet restore src/backend/AzureFunctions/AVS.BlobClient.FunctionApp/AVS.BlobClient.FunctionApp.csproj

      - name: Build
        run: dotnet build src/backend/AzureFunctions/AVS.BlobClient.FunctionApp/AVS.BlobClient.FunctionApp.csproj --configuration Release

      - name: Teste (placeholder)
        run: echo "Executar testes automatizados aqui"

      - name: Verificar se é branch de deploy
        id: check_env
        run: |
          if [[ "${BRANCH_NAME}" == "feature/*" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == "hotfix/*" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == "release/*" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=none" >> $GITHUB_OUTPUT
          fi

      - name: Encerrar se não for ambiente de deploy
        if: steps.check_env.outputs.env == 'none'
        run: echo "Branch de desenvolvimento - somente build/teste. Não haverá deploy."

      - name: Publicar
        if: steps.check_env.outputs.env != 'none'
        run: dotnet publish src/backend/AzureFunctions/AVS.BlobClient.FunctionApp/AVS.BlobClient.FunctionApp.csproj -c Release -o ./publish

      - name: Set Azure Credentials from Secret
        if: steps.check_env.outputs.env != 'none'
        env:
          ENV: ${{ steps.check_env.outputs.env }}
        run: |
          echo "Ambiente: $ENV"
          
          case "$ENV" in
            dev)
              echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS_DEV }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS_PROD }}" >> $GITHUB_ENV
              ;;            
            *)
              echo "Ambiente inválido: $ENV"
              exit 1
              ;;
          esac  

      - name: Login Azure
        if: steps.check_env.outputs.env != 'none'
        uses: azure/login@v1
        with:
          creds: ${{ github.env.AZURE_CREDENTIALS }}

      - name: Ler segredo do Key Vault
        if: steps.check_env.outputs.env != 'none'
        run: |
          VALOR=$(az keyvault secret show \
            --vault-name ${{ steps.check_env.outputs.env }}-kv-blobclient \
            --name ${{ steps.check_env.outputs.env }}-kvs-blobclient \
            --query value -o tsv)
          echo "Segredo lido do Key Vault: $VALOR"
          echo "SECRET_VALUE=$VALOR" >> $GITHUB_ENV

      - name: Deploy backend
        if: steps.check_env.outputs.env != 'none'
        run: |
          echo "Deploy para ambiente ${{ steps.check_env.outputs.env }}"
          echo "Segredo do Key Vault: $SECRET_VALUE"          
          # az functionapp deployment source config-zip \
          #   --resource-group ${{ steps.check_env.outputs.env }}-rg-blobclient \
          #   --name ${{ steps.check_env.outputs.env }}-fa-blobclient \
          #   --src ./publish.zip
