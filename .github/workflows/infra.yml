name: CI/CD - Infraestrutura

on:
  push:
    branches:
      - 'feature/**'
      - 'hotfix/**'
      - 'release/**'
      - 'developer'      
    paths:
      - '**.tf'
      - '.github/workflows/infra.yml'

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # necessário para git diff funcionar corretamente
      
      - name: Verificar mudanças em infraestrutura
        id: check_changes
        run: |
          echo "Verificando alterações na infraestrutura..."
          CHANGED=$(git diff --name-only HEAD^ HEAD | grep '^infra/' || true)
          echo "CHANGED FILES: $CHANGED"
          if [ -z "$CHANGED" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Terraform
        if: steps.check_changes.outputs.skip != 'true'
        uses: hashicorp/setup-terraform@v3

      - name: Determinar ambiente
        id: check_env
        run: |
          if [[ "${BRANCH_NAME}" == "feature/*" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == "hotfix/*" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${BRANCH_NAME}" == "release/*" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=none" >> $GITHUB_OUTPUT
          fi

      - name: Encerrar se não for ambiente de deploy
        if: steps.check_env.outputs.env != 'none' && steps.check_changes.outputs.skip != 'true'
        run: echo "Branch de desenvolvimento - somente validação. Sem aplicação."      

      - name: Set Azure credentials (dev)
        if: steps.check_env.outputs.env == 'dev' && steps.check_changes.outputs.skip != 'true'
        run: |
          echo "ARM_CLIENT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_DEV).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJSON(secrets.AZURE_CREDENTIALS_DEV).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_DEV).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_DEV).tenantId }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV

      - name: Set Azure credentials (prod)
        if: steps.check_env.outputs.env == 'prod' && steps.check_changes.outputs.skip != 'true'
        run: |
          echo "ARM_CLIENT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_PROD).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJSON(secrets.AZURE_CREDENTIALS_PROD).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_PROD).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJSON(secrets.AZURE_CREDENTIALS_PROD).tenantId }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV

      - name: Terraform Init
        if: steps.check_changes.outputs.skip != 'true'
        run: terraform init

      - name: Workspace Select or Create      
        if: steps.check_env.outputs.env != 'none' && steps.check_changes.outputs.skip != 'true'
        run: |
          terraform workspace select ${{ steps.check_env.outputs.env }} || terraform workspace new ${{ steps.check_env.outputs.env }}

      - name: Terraform Format
        if: steps.check_changes.outputs.skip != 'true'
        run: terraform fmt -check
      - name: Terraform Validate
        if: steps.check_changes.outputs.skip != 'true'
        run: terraform validate

      - name: Terraform Plan
        if: steps.check_env.outputs.env != 'none' && steps.check_changes.outputs.skip != 'true'
        run: terraform plan

      - name: Terraform Apply
        if: steps.check_env.outputs.env != 'none' && steps.check_changes.outputs.skip != 'true'
        run: terraform apply -auto-approve

      - name: Skip Message
        if: steps.check_changes.outputs.skip == 'true'
        run: echo "Nenhuma alteração em 'infra/'. Terraform não executado."